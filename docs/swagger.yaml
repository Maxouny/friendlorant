swagger: "2.0"
info:
  description: API для управления пользователями Friendlorant
  version: "1.0"
  title: Friendlorant User Management API
host: "localhost:8080"
basePath: "/api/v1"
schemes:
  - "http"
  - "https"

# Definitions
definitions:
  PublicUser:
    type: "object"
    required:
      - id
      - username
      - email
      - image
      - created_at
      - updated_at
    properties:
      id:
        type: "integer"
        format: "int64"
        description: Уникальный идентификатор пользователя (автоматически генерируется)
        example: 1
      username:
        type: "string"
        description: Имя пользователя
        example: johndoe
      email:
        type: "string"
        format: "email"
        description: Электронная почта пользователя
        example: john.doe@example.com
      image:
        type: "string"
        description: URL профиля пользователя
        example: https://example.com/johndoe/profile.jpg
      created_at:
        type: "string"
        format: "date-time"
        description: Дата и время создания пользователя
        example: 2022-01-01T12:00:00Z
      updated_at:
        type: "string"
        format: "date-time"
        description: Дата и время последнего обновления пользователя
        example: 2022-01-01T12:00:00Z

  User:
    type: "object"
    required:
      - username
      - email
      - password
    properties:
      username:
        type: "string"
        description: Имя пользователя
        example: johndoe
      email:
        type: "string"
        format: "email"
        description: Электронная почта пользователя
        example: john.doe@example.com
      password:
        type: "string"
        description: Пароль пользователя
        example: my_password

# Paths for user management operations
paths:
  /users/register:
    post:
      summary: Регистрация нового пользователя
      description: Создает нового пользователя в системе.
      tags: [User]
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        201:
          description: Пользователь успешно создан
          schema:
            $ref: "#/definitions/PublicUser"
          examples:
            application/json:
              id: 1
              username: johndoe
              email: john.doe@example.com
              image: https://example.com/johndoe/profile.jpg
              created_at: 2022-01-01T12:00:00Z
              updated_at: 2022-01-01T12:00:00Z
        400:
          description: Неправильный запрос (например, отсутствуют необходимые поля)
          schema:
            type: "object"
            properties:
              error:
                type: "string"
          examples:
            application/json:
              error: "Неверный запрос"
        409:
          description: Пользователь с такой почтой уже существует
          schema:
            type: "object"
            properties:
              error:
                type: "string"
          examples:
            application/json:
              error: "Email уже существует"
        500:
          description: Внутренняя ошибка сервера
          schema:
            type: "object"
            properties:
              error:
                type: "string"
          examples:
            application/json:
              error: "Не удалось хэшировать пароль"

  /users/login:
    post:
      summary: Аутентификация пользователя
      description: Аутентифицирует пользователя на основе электронной почты и пароля.
      tags: [User]
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: "object"
            properties:
              email:
                type: "string"
                format: "email"
                description: Электронная почта пользователя
                example: john.doe@example.com
              password:
                type: "string"
                description: Пароль пользователя
                example: my_password
      responses:
        200:
          description: Пользователь успешно аутентифицирован
          schema:
            $ref: "#/definitions/PublicUser"
          examples:
            application/json:
              id: 1
              username: johndoe
              email: john.doe@example.com
              image: https://example.com/johndoe/profile.jpg
              created_at: 2022-01-01T12:00:00Z
              updated_at: 2022-01-01T12:00:00Z
        400:
          description: Неправильный запрос (например, отсутствуют необходимые поля)
          schema:
            type: "object"
            properties:
              error:
                type: "string"
          examples:
            application/json:
              error: "Неверный запрос"
        401:
          description: Неправильный email или пароль
          schema:
            type: "object"
            properties:
              error:
                type: "string"
          examples:
            application/json:
              error: "Неверный email или пароль"
        500:
          description: Внутренняя ошибка сервера
          schema:
            type: "object"
            properties:
              error:
                type: "string"
          examples:
            application/json:
              error: "Не удалось создать токен"

  /users/{id}:
    get:
      summary: Получение пользователя по ID
      description: Извлекает информацию о пользователе по уникальному идентификатору.
      tags: [User]
      parameters:
        - name: id
          in: path
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: Пользователь успешно получен
          schema:
            $ref: "#/definitions/PublicUser"
          examples:
            application/json:
              id: 1
              username: johndoe
              email: john.doe@example.com
              image: https://example.com/johndoe/profile.jpg
              created_at: 2022-01-01T12:00:00Z
              updated_at: 2022-01-01T12:00:00Z
        400:
          description: Неправильный ID пользователя
          schema:
            type: "object"
            properties:
              error:
                type: "string"
          examples:
            application/json:
              error: "Неверный ID пользователя"
        404:
          description: Пользователь не найден
          schema:
            type: "object"
            properties:
              error:
                type: "string"
          examples:
            application/json:
              error: "Пользователь не найден"
        500:
          description: Внутренняя ошибка сервера
          schema:
            type: "object"
            properties:
              error:
                type: "string"
          examples:
            application/json:
              error: "Не удалось получить пользователя"

  /users/update/{id}:
    put:
      summary: Обновление информации о пользователе (только для авторизованных пользователей)
      description: Обновляет информацию о существующем пользователе.
      tags: [User]
      parameters:
        - name: id
          in: path
          required: true
          type: "integer"
          format: "int64"
        - name: body
          in: body
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        200:
          description: Пользователь успешно обновлен
          schema:
            $ref: "#/definitions/PublicUser"
          examples:
            application/json:
              id: 1
              username: johndoe
              email: john.doe@example.com
              image: https://example.com/johndoe/profile.jpg
              created_at: 2022-01-01T12:00:00Z
              updated_at: 2022-01-01T12:00:00Z
        400:
          description: Неправильный запрос (например, отсутствуют необходимые поля)
          schema:
            type: "object"
            properties:
              error:
                type: "string"
          examples:
            application/json:
              error: "Неверный запрос"
        404:
          description: Пользователь не найден
          schema:
            type: "object"
            properties:
              error:
                type: "string"
          examples:
            application/json:
              error: "Пользователь не найден"
        500:
          description: Внутренняя ошибка сервера
          schema:
            type: "object"
            properties:
              error:
                type: "string"
          examples:
            application/json:
              error: "Не удалось обновить пользователя"

  /users/delete/{id}:
    delete:
      summary: Удаление пользователя (только для авторизованных пользователей)
      description: Удаляет пользователя из системы.
      tags: [User]
      parameters:
        - name: id
          in: path
          required: true
          type: "integer"
          format: "int64"
      responses:
        204:
          description: Пользователь успешно удален
          examples:
            application/json: {}
        400:
          description: Неправильный ID пользователя
          schema:
            type: "object"
            properties:
              error:
                type: "string"
          examples:
            application/json:
              error: "Неверный ID пользователя"
        404:
          description: Пользователь не найден
          schema:
            type: "object"
            properties:
              error:
                type: "string"
          examples:
            application/json:
              error: "Пользователь не найден"
        500:
          description: Внутренняя ошибка сервера
          schema:
            type: "object"
            properties:
              error:
                type: "string"
          examples:
            application/json:
              error: "Не удалось удалить пользователя"
